{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{ define "upstream" }}
	{{ if .Address }}
		{{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
		{{ if and .Container.Node.ID .Address.HostPort }}
			# {{ .Container.Node.Name }}/{{ .Container.Name }}
			server {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }};
		{{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
		{{ else if .Network }}
			# {{ .Container.Name }}
			server {{ .Network.IP }}:{{ .Address.Port }};
		{{ end }}
	{{ else if .Network }}
		# {{ .Container.Name }}
		server {{ .Network.IP }} down;
	{{ end }}
{{ end }}

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

# Apply fix for very long server names
server_names_hash_bucket_size 128;

# Default dhparam
{{ if (exists "/config/nginx/certs/dhparam.pem") }}
ssl_dhparam /config/nginx/certs/dhparam.pem;
{{ end }}

# Set appropriate X-Forwarded-Ssl header
map $scheme $proxy_x_forwarded_ssl {
  default off;
  https on;
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';

access_log off;

{{ if $.Env.RESOLVERS }}
resolver {{ $.Env.RESOLVERS }};
{{ end }}

{{ if (exists "/etc/nginx/proxy.conf") }}
include /etc/nginx/proxy.conf;
{{ else }}
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;

# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";
{{ end }}

{{ $enable_ipv6 := eq (or ($.Env.ENABLE_IPV6) "") "true" }}
server {
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	listen 80;
	{{ if $enable_ipv6 }}
	listen [::]:80;
	{{ end }}
	access_log /config/nginx/log/access.log vhost;
	return 503;
	root    /app;
	include /config/nginx/config/default.d/*.conf;
}

{{ if (and (exists "/config/nginx/certs/default.crt") (exists "/config/nginx/certs/default.key")) }}
server {
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	listen 443 ssl http2;
	{{ if $enable_ipv6 }}
	listen [::]:443 ssl http2;
	{{ end }}
	access_log /config/nginx/log/access.log vhost;
	return 503;

	ssl_session_tickets off;
	ssl_certificate /config/nginx/certs/default.crt;
	ssl_certificate_key /config/nginx/certs/default.key;
	root    /app;
	include /config/nginx/config/default.d/*.conf;
}
{{ end }}

upstream {{ $.Env.DEFAULT_HOST }} {
    server {{$.Env.DEFAULT_HOST}}:80;
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

{{ $host := trim $host }}
{{ $is_regexp := hasPrefix "~" $host }}
{{ $upstream_name := when $is_regexp (sha1 $host) $host }}

# {{ $host }}
upstream {{ $upstream_name }} {

{{ range $container := $containers }}
	{{ $addrLen := len $container.Addresses }}

	{{ range $knownNetwork := $CurrentContainer.Networks }}
		{{ range $containerNetwork := $container.Networks }}
			{{ if (and (ne $containerNetwork.Name "ingress") (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host"))) }}
				## Can be connect with "{{ $containerNetwork.Name }}" network

				{{/* If only 1 port exposed, use that */}}
				{{ if eq $addrLen 1 }}
					{{ $address := index $container.Addresses 0 }}
					{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
				{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
				{{ else }}
					{{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
					{{ $address := where $container.Addresses "Port" $port | first }}
					{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}
}

{{ $default_host := or ($.Env.DEFAULT_HOST) "" }}
{{ $default_server := index (dict $host "" $default_host "default_server") $host }}

{{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
{{ $proto := trim (or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http") }}

{{/* Get the NETWORK_ACCESS defined by containers w/ the same vhost, falling back to "external" */}}
{{ $network_tag := or (first (groupByKeys $containers "Env.NETWORK_ACCESS")) "external" }}

{{/* Get the NETWORK_ACCESS defined by containers w/ the same vhost, falling back to "external" */}}
{{ $network_tag := or (first (groupByKeys $containers "Env.NETWORK_ACCESS")) "external" }}

{{/* Get the HTTPS_METHOD defined by containers w/ the same vhost, falling back to "redirect" */}}
{{ $https_method := or (first (groupByKeys $containers "Env.HTTPS_METHOD")) "redirect" }}

{{/* Get the HSTS defined by containers w/ the same vhost, falling back to "max-age=31536000" */}}
{{ $hsts := or (first (groupByKeys $containers "Env.HSTS")) "max-age=31536000" }}

{{/* Get the VIRTUAL_ROOT By containers w/ use fastcgi root */}}
{{ $vhost_root := or (first (groupByKeys $containers "Env.VIRTUAL_ROOT")) "/app" }}

{{/* Get the FASTCGI_INDEX By containers w/ use default index */}}
{{ $fastcgi_index := or (first (groupByKeys $containers "Env.FASTCGI_INDEX")) "index.php" }}

{{/* Get the MAX_BODY_SIZE */}}
{{ $max_body_size := or (first (groupByKeys $containers "Env.MAX_BODY_SIZE")) "1M" }}


{{/* Get the first cert name defined by containers w/ the same vhost */}}
{{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }}

{{/* Get the best matching cert  by name for the vhost. */}}
{{ $vhostCert := (closest (dir "/config/nginx/certs") (printf "%s.crt" $host))}}

{{/* vhostCert is actually a filename so remove any suffixes since they are added later */}}
{{ $vhostCert := trimSuffix ".crt" $vhostCert }}
{{ $vhostCert := trimSuffix ".key" $vhostCert }}

{{/* Use the cert specified on the container or fallback to the best vhost match */}}
{{ $cert := (coalesce $certName $vhostCert) }}

{{ $use_le := trim (or (first (groupByKeys $containers "Env.VIRTUAL_USE_LETSENCRYPT")) "no") }}

{{ $is_https := (and (ne $https_method "nohttps") (ne $cert "") (exists (printf "/config/nginx/certs/%s.crt" $cert)) (exists (printf "/config/nginx/certs/%s.key" $cert))) }}
{{ $is_https := and (or $is_https (eq $use_le "yes")) (exists (printf "/config/letsencrypt/live/%s" $host)) }}

{{ if $is_https }}

{{ if eq $https_method "redirect" }}
server {
	server_name {{ $host }};
	listen 80 {{ $default_server }};
	{{ if $enable_ipv6 }}
	listen [::]:80 {{ $default_server }};
	{{ end }}
	access_log /config/nginx/log/access.log vhost;

	location /.well-known/ {
		root   /config/nginx/www;
	}

	location / {
		return 301 https://$host$request_uri;
	}
}
{{ end }}

server {
	server_name {{ $host }};
	listen 443 ssl http2 {{ $default_server }};
	{{ if $enable_ipv6 }}
	listen [::]:443 ssl http2 {{ $default_server }};
	{{ end }}
	access_log /config/nginx/log/access.log vhost;

	{{ if eq $network_tag "internal" }}
	# Only allow traffic from internal clients
	include /etc/nginx/network_internal.conf;
	{{ end }}

    client_max_body_size {{ $max_body_size }};

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	{{/*ssl_ciphers 'kEECDH+AES128:kEECDH:kEDH:-3DES:kRSA+AES128:kEDH+3DES:DES-CBC3-SHA:!RC4:!aNULL:!eNULL:!MD5:!EXPORT:!LOW:!SEED:!CAMELLIA:!IDEA:!PSK:!SRP:!SSLv2;';*/}}
	ssl_ciphers 'EECDH:+AES256:-3DES:RSA+AES:RSA+3DES:!NULL:!RC4';

	ssl_prefer_server_ciphers on;
	ssl_session_timeout 24h;
	ssl_session_cache shared:SSL:50m;
	ssl_session_tickets off;

    add_header Strict-Transport-Security "max-age=31536000;";
    add_header Content-Security-Policy-Report-Only "default-src https:; script-src https: 'unsafe-eval' 'unsafe-inline'; style-src https: 'unsafe-inline'; img-src https: data:; font-src https: data:; report-uri /csp-report";

    {{ if eq $use_le "yes" }}

    ssl_certificate /config/letsencrypt/live/{{$host}}/fullchain.pem;
    ssl_certificate_key /config/letsencrypt/live/{{$host}}/privkey.pem;
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /config/letsencrypt/live/{{$host}}/chain.pem;
	ssl_dhparam /config/letsencrypt/live/{{$host}}/dhparam.pem;

    {{ else }}

	ssl_certificate /config/nginx/certs/{{ (printf "%s.crt" $cert) }};
	ssl_certificate_key /config/nginx/certs/{{ (printf "%s.key" $cert) }};

	{{ if (exists (printf "/config/nginx/certs/%s.dhparam.pem" $cert)) }}
	ssl_dhparam {{ printf "/config/nginx/certs/%s.dhparam.pem" $cert }};
	{{ else if (exists (printf "/config/nginx/certs/dhparam.pem" $cert)) }}
	ssl_dhparam {{ printf "/config/nginx/certs/dhparam.pem" $cert }};
	{{ end }}

	{{ if (exists (printf "/config/nginx/certs/%s.chain.crt" $cert)) }}
	ssl_stapling on;
	ssl_stapling_verify on;
	ssl_trusted_certificate {{ printf "/config/nginx/certs/%s.chain.crt" $cert }};
	{{ end }}

    {{ end }}

	{{ if (and (ne $https_method "noredirect") (ne $hsts "off")) }}
	add_header Strict-Transport-Security "{{ trim $hsts }}";
	{{ end }}

	{{ if (exists (printf "/config/nginx/config/vhost.d/%s" $host)) }}
	include {{ printf "/config/nginx/config/vhost.d/%s" $host }};
	{{ else if (exists "/config/nginx/config/vhost.d/default") }}
	include /config/nginx/config/vhost.d/default;
	{{ end }}

	location / {
		{{ if eq $proto "uwsgi" }}
		include uwsgi_params;
		uwsgi_pass {{ trim $proto }}://{{ trim $upstream_name }};
		{{ else if eq $proto "fastcgi" }}
		root   {{ trim $vhost_root }};
		include fastcgi.conf;
		fastcgi_pass {{ trim $upstream_name }};
		fastcgi_index {{ trim $fastcgi_index }}
		{{ else }}
		proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
		{{ end }}

		{{ if (exists (printf "/config/nginx/htpasswd/%s" $host)) }}
		auth_basic	"Restricted {{ $host }}";
		auth_basic_user_file	{{ (printf "/config/nginx/htpasswd/%s" $host) }};
		{{ end }}
		{{ if (exists (printf "/config/nginx/config/vhost.d/%s_location" $host)) }}
		include {{ printf "/config/nginx/config/vhost.d/%s_location" $host}};
		{{ else if (exists "/config/nginx/config/vhost.d/default_location") }}
		include /config/nginx/config/vhost.d/default_location;
		{{ end }}
	}
}

{{ end }}

{{ if or (not $is_https) (eq $https_method "noredirect") }}

server {
	server_name {{ $host }};
	listen 80 {{ $default_server }};
	{{ if $enable_ipv6 }}
	listen [::]:80 {{ $default_server }};
	{{ end }}
	access_log /config/nginx/log/access.log vhost;

    client_max_body_size {{ $max_body_size }};

	{{ if eq $network_tag "internal" }}
	# Only allow traffic from internal clients
	include /etc/nginx/network_internal.conf;
	{{ end }}

	{{ if (exists (printf "/config/nginx/config/vhost.d/%s" $host)) }}
	include {{ printf "/config/nginx/config/vhost.d/%s" $host }};
	{{ else if (exists "/config/nginx/config/vhost.d/default") }}
	include /config/nginx/config/vhost.d/default;
	{{ end }}

	location /.well-known/ {
		root   /config/nginx/www;
	}

	location / {
		{{ if eq $proto "uwsgi" }}
		include uwsgi_params;
		uwsgi_pass {{ trim $proto }}://{{ trim $upstream_name }};
		{{ else if eq $proto "fastcgi" }}
		root   {{ trim $vhost_root }};
		include fastcgi.conf;
		fastcgi_pass {{ trim $upstream_name }};
		fastcgi_index {{ trim $fastcgi_index }};
		{{ else }}
		proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
		{{ end }}
		{{ if (exists (printf "/config/nginx/htpasswd/%s" $host)) }}
		auth_basic	"Restricted {{ $host }}";
		auth_basic_user_file	{{ (printf "/config/nginx/htpasswd/%s" $host) }};
		{{ end }}
		{{ if (exists (printf "/config/nginx/config/vhost.d/%s_location" $host)) }}
		include {{ printf "/config/nginx/config/vhost.d/%s_location" $host}};
		{{ else if (exists "/config/nginx/config/vhost.d/default_location") }}
		include /config/nginx/config/vhost.d/default_location;
		{{ end }}
	}
}

{{ if (and (not $is_https) (exists "/config/nginx/certs/default.crt") (exists "/config/nginx/certs/default.key")) }}
server {
	server_name {{ $host }};
	listen 443 ssl http2 {{ $default_server }};
	{{ if $enable_ipv6 }}
	listen [::]:443 ssl http2 {{ $default_server }};
	{{ end }}
	access_log /config/nginx/log/access.log vhost;
	return 500;

	ssl_certificate /config/nginx/certs/default.crt;
	ssl_certificate_key /config/nginx/certs/default.key;
}
{{ end }}

{{ end }}
{{ end }}
